-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\full_system_nios_id3\full_system.vhd
-- Created: 2023-05-18 15:10:52
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- svm_out                       ce_out        1
-- done                          ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: full_system
-- Source Path: full_system_nios_id3/full_system
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.full_system_pkg.ALL;

ENTITY full_system IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        signal_in                         :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En4
        enable                            :   IN    std_logic;
        scale                             :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En12
        cur_mu_D1                         :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En12
        cur_sig_D1                        :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En12
        cur_beta_D1                       :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En12
        bias                              :   IN    std_logic_vector(41 DOWNTO 0);  -- sfix42_En12
        ce_out                            :   OUT   std_logic;
        svm_out                           :   OUT   std_logic_vector(42 DOWNTO 0);  -- sfix43_En12
        done                              :   OUT   std_logic
        );
END full_system;


ARCHITECTURE rtl OF full_system IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT full_system_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_1_1                       :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT Discrete_FIR_Filter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Discrete_FIR_Filter_in          :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En4
          Discrete_FIR_Filter_coeff       :   IN    vector_of_std_logic_vector16(0 TO 7);  -- int16 [8]
          Discrete_FIR_Filter_out         :   OUT   std_logic_vector(34 DOWNTO 0)  -- sfix35_En4
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : full_system_tc
    USE ENTITY work.full_system_tc(rtl);

  FOR ALL : Discrete_FIR_Filter
    USE ENTITY work.Discrete_FIR_Filter(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_1_1                        : std_logic;
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL HDL_Counter_out1                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Constant2_out1                   : std_logic;
  SIGNAL trigger                          : std_logic;
  SIGNAL trigger_1                        : std_logic;
  SIGNAL Delay_reg                        : std_logic_vector(0 TO 448);  -- ufix1 [449]
  SIGNAL trigger_2                        : std_logic;
  SIGNAL trigger_bool                     : std_logic;
  SIGNAL trigger_delay                    : std_logic;
  SIGNAL trigger_delayN                   : std_logic;
  SIGNAL trigger_rEdge                    : std_logic;
  SIGNAL Discrete_Time_Integrator2_reg_iv : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL RT2_bypass_reg                   : std_logic;  -- ufix1
  SIGNAL RT2_out1                         : std_logic;
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Constant_out1                    : signed(34 DOWNTO 0);  -- sfix35_En4
  SIGNAL db4_wavelet_out1                 : vector_of_signed16(0 TO 7);  -- int16 [8]
  SIGNAL db4_wavelet_out1_1               : vector_of_std_logic_vector16(0 TO 7);  -- ufix16 [8]
  SIGNAL Discrete_FIR_Filter_out1         : std_logic_vector(34 DOWNTO 0);  -- ufix35
  SIGNAL Discrete_FIR_Filter_out1_signed  : signed(34 DOWNTO 0);  -- sfix35_En4
  SIGNAL Downsample_out1                  : signed(34 DOWNTO 0);  -- sfix35_En4
  SIGNAL Switch_out1                      : signed(34 DOWNTO 0);  -- sfix35_En4
  SIGNAL delayMatch_reg                   : vector_of_signed35(0 TO 221);  -- sfix35 [222]
  SIGNAL Switch_out1_1                    : signed(34 DOWNTO 0);  -- sfix35_En4
  SIGNAL in_rsvd                          : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL RT_out1                          : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL Resettable_Delay_iv              : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL Resettable_Delay_toDel           : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL Resettable_Delay_delOut          : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL Resettable_Delay_out1            : signed(18 DOWNTO 0);  -- sfix19_En4
  SIGNAL Subtract1_sub_cast               : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Subtract1_sub_cast_1             : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Subtract1_out1                   : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Abs_y                            : signed(20 DOWNTO 0);  -- sfix21_En4
  SIGNAL Abs_cast                         : signed(20 DOWNTO 0);  -- sfix21_En4
  SIGNAL Abs_out1                         : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Abs_out1_dlyBalance              : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Discrete_Time_Integrator2_u_add  : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Discrete_Time_Integrator2_reg_toDel : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Discrete_Time_Integrator2_x_reg_out : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Delay2_out1                      : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL Switch1_out1                     : signed(19 DOWNTO 0);  -- sfix20_En4
  SIGNAL cur_mu_D1_signed                 : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL cur_sig_D1_signed                : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL bias_signed                      : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL cur_beta_D1_signed               : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL Subtract_sub_cast                : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL Subtract_sub_cast_1              : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL with_mu                          : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL Data_Type_Conversion1_out1       : signed(54 DOWNTO 0);  -- sfix55_En24
  SIGNAL Data_Type_Conversion1_out1_dtc   : signed(55 DOWNTO 0);  -- sfix56_En24
  SIGNAL scale_signed                     : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL Product_out1                     : signed(83 DOWNTO 0);  -- sfix84_En24
  SIGNAL Data_Type_Conversion2_out1       : signed(62 DOWNTO 0);  -- sfix63_En12
  SIGNAL after_div                        : signed(41 DOWNTO 0);  -- sfix42_En12
  SIGNAL Product1_mul_temp                : signed(83 DOWNTO 0);  -- sfix84_En24
  SIGNAL after_beta                       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL Add_add_cast                     : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL Add_add_cast_1                   : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL predictor                        : signed(42 DOWNTO 0);  -- sfix43_En12
  SIGNAL HDL_Counter1_out1                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL switch_compare_1_1               : std_logic;
  SIGNAL Constant5_out1                   : std_logic;
  SIGNAL Constant6_out1                   : std_logic;

BEGIN
  -- Generates a trigger every 512 samples (every 1sec),  may need to delay it to correspond to DWT timing

  u_full_system_tc : full_system_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_1_1 => enb_1_1_1,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1
              );

  u_Discrete_FIR_Filter : Discrete_FIR_Filter
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              Discrete_FIR_Filter_in => signal_in,  -- sfix16_En4
              Discrete_FIR_Filter_coeff => db4_wavelet_out1_1,  -- int16 [8]
              Discrete_FIR_Filter_out => Discrete_FIR_Filter_out1  -- sfix35_En4
              );

  Constant1_out1 <= '0';

  NOT_out1 <=  NOT enable;

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 511
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF NOT_out1 = '1' THEN 
          HDL_Counter_out1 <= to_unsigned(16#000#, 9);
        ELSIF enable = '1' THEN 
          HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#001#, 9);
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Constant2_out1 <= '1';

  
  trigger <= Constant2_out1 WHEN HDL_Counter_out1 = to_unsigned(16#000#, 9) ELSE
      Constant1_out1;

  
  trigger_1 <= Constant1_out1 WHEN enable = '0' ELSE
      trigger;

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_reg(0) <= trigger_1;
        Delay_reg(1 TO 448) <= Delay_reg(0 TO 447);
      END IF;
    END IF;
  END PROCESS Delay_process;

  trigger_2 <= Delay_reg(448);

  
  trigger_bool <= '1' WHEN trigger_2 /= '0' ELSE
      '0';

  intdelay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      trigger_delay <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        trigger_delay <= trigger_bool;
      END IF;
    END IF;
  END PROCESS intdelay1_process;


  trigger_delayN <=  NOT trigger_delay;

  trigger_rEdge <= trigger_bool AND trigger_delayN;

  Discrete_Time_Integrator2_reg_iv <= to_signed(16#00000#, 20);

  RT2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      RT2_bypass_reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_1 = '1' THEN
        RT2_bypass_reg <= enable;
      END IF;
    END IF;
  END PROCESS RT2_bypass_process;

  
  RT2_out1 <= enable WHEN enb_1_2_1 = '1' ELSE
      RT2_bypass_reg;

  
  switch_compare_1 <= '1' WHEN RT2_out1 > '0' ELSE
      '0';

  Constant_out1 <= to_signed(0, 35);

  db4_wavelet_out1(0) <= to_signed(16#0000#, 16);
  db4_wavelet_out1(1) <= to_signed(16#0001#, 16);
  db4_wavelet_out1(2) <= to_signed(-16#0001#, 16);
  db4_wavelet_out1(3) <= to_signed(16#0000#, 16);
  db4_wavelet_out1(4) <= to_signed(16#0000#, 16);
  db4_wavelet_out1(5) <= to_signed(16#0000#, 16);
  db4_wavelet_out1(6) <= to_signed(16#0000#, 16);
  db4_wavelet_out1(7) <= to_signed(16#0000#, 16);

  outputgen: FOR k IN 0 TO 7 GENERATE
    db4_wavelet_out1_1(k) <= std_logic_vector(db4_wavelet_out1(k));
  END GENERATE;

  Discrete_FIR_Filter_out1_signed <= signed(Discrete_FIR_Filter_out1);

  -- Downsample output register
  Downsample_output_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Downsample_out1 <= to_signed(0, 35);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Downsample_out1 <= Discrete_FIR_Filter_out1_signed;
      END IF;
    END IF;
  END PROCESS Downsample_output_process;


  
  Switch_out1 <= Constant_out1 WHEN switch_compare_1 = '0' ELSE
      Downsample_out1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_signed(0, 35));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        delayMatch_reg(0) <= Switch_out1;
        delayMatch_reg(1 TO 221) <= delayMatch_reg(0 TO 220);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Switch_out1_1 <= delayMatch_reg(221);

  in_rsvd <= Switch_out1_1(18 DOWNTO 0);

  RT_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      RT_out1 <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        RT_out1 <= in_rsvd;
      END IF;
    END IF;
  END PROCESS RT_process;


  Resettable_Delay_iv <= to_signed(16#00000#, 19);

  
  Resettable_Delay_toDel <= RT_out1 WHEN trigger_2 = '0' ELSE
      Resettable_Delay_iv;

  Resettable_Delay_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Resettable_Delay_delOut <= to_signed(16#00000#, 19);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Resettable_Delay_delOut <= Resettable_Delay_toDel;
      END IF;
    END IF;
  END PROCESS Resettable_Delay_lowered_process;


  
  Resettable_Delay_out1 <= Resettable_Delay_delOut WHEN trigger_2 = '0' ELSE
      Resettable_Delay_iv;

  Subtract1_sub_cast <= resize(RT_out1, 20);
  Subtract1_sub_cast_1 <= resize(Resettable_Delay_out1, 20);
  Subtract1_out1 <= Subtract1_sub_cast - Subtract1_sub_cast_1;

  Abs_cast <= resize(Subtract1_out1, 21);
  
  Abs_y <=  - (Abs_cast) WHEN Subtract1_out1 < to_signed(16#00000#, 20) ELSE
      resize(Subtract1_out1, 21);
  Abs_out1 <= Abs_y(19 DOWNTO 0);

  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Abs_out1_dlyBalance <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Abs_out1_dlyBalance <= Abs_out1;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  
  Discrete_Time_Integrator2_reg_toDel <= Discrete_Time_Integrator2_u_add WHEN trigger_rEdge = '0' ELSE
      Discrete_Time_Integrator2_reg_iv;

  Discrete_Time_Integrator2_reg_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Discrete_Time_Integrator2_x_reg_out <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Discrete_Time_Integrator2_x_reg_out <= Discrete_Time_Integrator2_reg_toDel;
      END IF;
    END IF;
  END PROCESS Discrete_Time_Integrator2_reg_lowered_process;


  Discrete_Time_Integrator2_u_add <= Discrete_Time_Integrator2_x_reg_out + Abs_out1_dlyBalance;

  
  Switch1_out1 <= Delay2_out1 WHEN trigger_2 = '0' ELSE
      Discrete_Time_Integrator2_u_add;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= to_signed(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= Switch1_out1;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  cur_mu_D1_signed <= signed(cur_mu_D1);

  cur_sig_D1_signed <= signed(cur_sig_D1);

  bias_signed <= signed(bias);

  cur_beta_D1_signed <= signed(cur_beta_D1);

  Subtract_sub_cast <= resize(Delay2_out1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 43);
  Subtract_sub_cast_1 <= resize(cur_mu_D1_signed, 43);
  with_mu <= Subtract_sub_cast - Subtract_sub_cast_1;

  Data_Type_Conversion1_out1 <= with_mu & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  Data_Type_Conversion1_out1_dtc <= resize(Data_Type_Conversion1_out1, 56);

  scale_signed <= signed(scale);

  Product_out1 <= cur_sig_D1_signed * scale_signed;

  Data_Type_Conversion2_out1 <= Product_out1(74 DOWNTO 12);

  Divide_output : PROCESS (Data_Type_Conversion1_out1_dtc, Data_Type_Conversion2_out1)
    VARIABLE c : signed(62 DOWNTO 0);
    VARIABLE div_temp : signed(62 DOWNTO 0);
  BEGIN
    div_temp := to_signed(0, 63);
    IF Data_Type_Conversion2_out1 = to_signed(0, 63) THEN 
      IF Data_Type_Conversion1_out1_dtc < to_signed(0, 56) THEN 
        c := signed'("100000000000000000000000000000000000000000000000000000000000000");
      ELSE 
        c := signed'("011111111111111111111111111111111111111111111111111111111111111");
      END IF;
    ELSE 
      div_temp := resize(Data_Type_Conversion1_out1_dtc, 63) / Data_Type_Conversion2_out1;
      c := div_temp;
    END IF;
    IF (c(62) = '0') AND (c(61 DOWNTO 41) /= "000000000000000000000") THEN 
      after_div <= "011111111111111111111111111111111111111111";
    ELSIF (c(62) = '1') AND (c(61 DOWNTO 41) /= "111111111111111111111") THEN 
      after_div <= "100000000000000000000000000000000000000000";
    ELSE 
      after_div <= c(41 DOWNTO 0);
    END IF;
  END PROCESS Divide_output;


  Product1_mul_temp <= cur_beta_D1_signed * after_div;
  after_beta <= Product1_mul_temp(43 DOWNTO 12);

  Add_add_cast <= resize(bias_signed, 43);
  Add_add_cast_1 <= resize(after_beta, 43);
  predictor <= Add_add_cast + Add_add_cast_1;

  svm_out <= std_logic_vector(predictor);

  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF NOT_out1 = '1' THEN 
          HDL_Counter1_out1 <= to_unsigned(16#0#, 4);
        ELSIF trigger_2 = '1' THEN 
          IF HDL_Counter1_out1 >= to_unsigned(16#2#, 4) THEN 
            HDL_Counter1_out1 <= to_unsigned(16#0#, 4);
          ELSE 
            HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#1#, 4);
          END IF;
        END IF;
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  
  switch_compare_1_1 <= '1' WHEN HDL_Counter1_out1 >= to_unsigned(16#2#, 4) ELSE
      '0';

  Constant5_out1 <= '0';

  Constant6_out1 <= '1';

  
  done <= Constant5_out1 WHEN switch_compare_1_1 = '0' ELSE
      Constant6_out1;

  ce_out <= enb_1_1_1;

END rtl;

