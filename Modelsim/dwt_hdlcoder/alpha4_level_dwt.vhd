-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\hdlcoder_dwt\alpha4_level_dwt.vhd
-- Created: 2023-05-02 15:37:17
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out_5      2
-- ce_out_4      4
-- ce_out_3      8
-- ce_out_2      16
-- ce_out_1      32
-- ce_out_0      64
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- A6                            ce_out_0      64
-- D6                            ce_out_0      64
-- D5                            ce_out_1      32
-- D4                            ce_out_2      16
-- D3                            ce_out_3      8
-- D2                            ce_out_4      4
-- D1                            ce_out_5      2
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: alpha4_level_dwt
-- Source Path: hdlcoder_dwt/4_level_dwt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.alpha4_level_dwt_pkg.ALL;

ENTITY alpha4_level_dwt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        signal_in                         :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        enable                            :   IN    std_logic;
        ce_out_0                          :   OUT   std_logic;
        ce_out_1                          :   OUT   std_logic;
        ce_out_2                          :   OUT   std_logic;
        ce_out_3                          :   OUT   std_logic;
        ce_out_4                          :   OUT   std_logic;
        ce_out_5                          :   OUT   std_logic;
        A6                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D6                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D5                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D4                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D3                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D2                                :   OUT   std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
        D1                                :   OUT   std_logic_vector(31 DOWNTO 0)  -- sfix32_En12
        );
END alpha4_level_dwt;


ARCHITECTURE rtl OF alpha4_level_dwt IS

  -- Component Declarations
  COMPONENT alpha4_level_dwt_tc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          enb                             :   OUT   std_logic;
          enb_1_2_0                       :   OUT   std_logic;
          enb_1_2_1                       :   OUT   std_logic;
          enb_1_4_0                       :   OUT   std_logic;
          enb_1_4_1                       :   OUT   std_logic;
          enb_1_8_0                       :   OUT   std_logic;
          enb_1_8_1                       :   OUT   std_logic;
          enb_1_16_0                      :   OUT   std_logic;
          enb_1_16_1                      :   OUT   std_logic;
          enb_1_32_0                      :   OUT   std_logic;
          enb_1_32_1                      :   OUT   std_logic;
          enb_1_64_0                      :   OUT   std_logic;
          enb_1_64_1                      :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb                             :   IN    std_logic;
          enb_1_2_1                       :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(50 DOWNTO 0);  -- sfix51_En12
          A                               :   OUT   std_logic_vector(50 DOWNTO 0)  -- sfix51_En12
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_2_0                       :   IN    std_logic;
          enb_1_4_1                       :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(50 DOWNTO 0);  -- sfix51_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(69 DOWNTO 0);  -- sfix70_En12
          A                               :   OUT   std_logic_vector(69 DOWNTO 0)  -- sfix70_En12
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_4_0                       :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          enb_1_8_1                       :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(69 DOWNTO 0);  -- sfix70_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(88 DOWNTO 0);  -- sfix89_En12
          A                               :   OUT   std_logic_vector(88 DOWNTO 0)  -- sfix89_En12
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_8_0                       :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_16_1                      :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(88 DOWNTO 0);  -- sfix89_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(107 DOWNTO 0);  -- sfix108_En12
          A                               :   OUT   std_logic_vector(107 DOWNTO 0)  -- sfix108_En12
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt4
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_16_0                      :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_32_1                      :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(107 DOWNTO 0);  -- sfix108_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(126 DOWNTO 0);  -- sfix127_En12
          A                               :   OUT   std_logic_vector(126 DOWNTO 0)  -- sfix127_En12
          );
  END COMPONENT;

  COMPONENT alpha1_level_dwt5
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          enb_1_64_0                      :   IN    std_logic;
          enb_1_64_1                      :   IN    std_logic;
          s_in                            :   IN    std_logic_vector(31 DOWNTO 0);  -- sfix32_En12
          enable                          :   IN    std_logic;
          D                               :   OUT   std_logic_vector(50 DOWNTO 0);  -- sfix51_En12
          A                               :   OUT   std_logic_vector(50 DOWNTO 0)  -- sfix51_En12
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : alpha4_level_dwt_tc
    USE ENTITY work.alpha4_level_dwt_tc(rtl);

  FOR ALL : alpha1_level_dwt
    USE ENTITY work.alpha1_level_dwt(rtl);

  FOR ALL : alpha1_level_dwt1
    USE ENTITY work.alpha1_level_dwt1(rtl);

  FOR ALL : alpha1_level_dwt2
    USE ENTITY work.alpha1_level_dwt2(rtl);

  FOR ALL : alpha1_level_dwt3
    USE ENTITY work.alpha1_level_dwt3(rtl);

  FOR ALL : alpha1_level_dwt4
    USE ENTITY work.alpha1_level_dwt4(rtl);

  FOR ALL : alpha1_level_dwt5
    USE ENTITY work.alpha1_level_dwt5(rtl);

  -- Signals
  SIGNAL enb_1_4_0                        : std_logic;
  SIGNAL enb_1_8_0                        : std_logic;
  SIGNAL enb_1_16_0                       : std_logic;
  SIGNAL enb_1_32_0                       : std_logic;
  SIGNAL enb_1_64_0                       : std_logic;
  SIGNAL enb_1_2_0                        : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL enb_1_2_1                        : std_logic;
  SIGNAL enb_1_4_1                        : std_logic;
  SIGNAL enb_1_8_1                        : std_logic;
  SIGNAL enb_1_16_1                       : std_logic;
  SIGNAL enb_1_32_1                       : std_logic;
  SIGNAL enb_1_64_1                       : std_logic;
  SIGNAL alpha1_level_dwt_out1            : std_logic_vector(50 DOWNTO 0);  -- ufix51
  SIGNAL alpha1_level_dwt_out2            : std_logic_vector(50 DOWNTO 0);  -- ufix51
  SIGNAL alpha1_level_dwt1_out1           : std_logic_vector(69 DOWNTO 0);  -- ufix70
  SIGNAL alpha1_level_dwt1_out2           : std_logic_vector(69 DOWNTO 0);  -- ufix70
  SIGNAL alpha1_level_dwt2_out1           : std_logic_vector(88 DOWNTO 0);  -- ufix89
  SIGNAL alpha1_level_dwt2_out2           : std_logic_vector(88 DOWNTO 0);  -- ufix89
  SIGNAL alpha1_level_dwt3_out1           : std_logic_vector(107 DOWNTO 0);  -- ufix108
  SIGNAL alpha1_level_dwt3_out2           : std_logic_vector(107 DOWNTO 0);  -- ufix108
  SIGNAL alpha1_level_dwt4_out1           : std_logic_vector(126 DOWNTO 0);  -- ufix127
  SIGNAL alpha1_level_dwt4_out2           : std_logic_vector(126 DOWNTO 0);  -- ufix127
  SIGNAL alpha1_level_dwt4_out2_signed    : signed(126 DOWNTO 0);  -- sfix127_En12
  SIGNAL Data_Type_Conversion6_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt5_out1           : std_logic_vector(50 DOWNTO 0);  -- ufix51
  SIGNAL alpha1_level_dwt5_out2           : std_logic_vector(50 DOWNTO 0);  -- ufix51
  SIGNAL alpha1_level_dwt5_out2_signed    : signed(50 DOWNTO 0);  -- sfix51_En12
  SIGNAL Data_Type_Conversion2_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt5_out1_signed    : signed(50 DOWNTO 0);  -- sfix51_En12
  SIGNAL Delay5_reg                       : vector_of_signed51(0 TO 1);  -- sfix51 [2]
  SIGNAL Delay5_out1                      : signed(50 DOWNTO 0);  -- sfix51_En12
  SIGNAL Data_Type_Conversion4_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt4_out1_signed    : signed(126 DOWNTO 0);  -- sfix127_En12
  SIGNAL Delay4_reg                       : vector_of_signed127(0 TO 8);  -- sfix127 [9]
  SIGNAL Delay4_out1                      : signed(126 DOWNTO 0);  -- sfix127_En12
  SIGNAL Data_Type_Conversion5_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt3_out1_signed    : signed(107 DOWNTO 0);  -- sfix108_En12
  SIGNAL Delay3_reg                       : vector_of_signed108(0 TO 22);  -- sfix108 [23]
  SIGNAL Delay3_out1                      : signed(107 DOWNTO 0);  -- sfix108_En12
  SIGNAL Data_Type_Conversion3_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt2_out1_signed    : signed(88 DOWNTO 0);  -- sfix89_En12
  SIGNAL Delay2_reg                       : vector_of_signed89(0 TO 50);  -- sfix89 [51]
  SIGNAL Delay2_out1                      : signed(88 DOWNTO 0);  -- sfix89_En12
  SIGNAL Data_Type_Conversion_out1        : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt1_out1_signed    : signed(69 DOWNTO 0);  -- sfix70_En12
  SIGNAL Delay1_reg                       : vector_of_signed70(0 TO 107);  -- sfix70 [108]
  SIGNAL Delay1_out1                      : signed(69 DOWNTO 0);  -- sfix70_En12
  SIGNAL Data_Type_Conversion1_out1       : signed(31 DOWNTO 0);  -- sfix32_En12
  SIGNAL alpha1_level_dwt_out1_signed     : signed(50 DOWNTO 0);  -- sfix51_En12
  SIGNAL Delay6_reg                       : vector_of_signed51(0 TO 221);  -- sfix51 [222]
  SIGNAL Delay6_out1                      : signed(50 DOWNTO 0);  -- sfix51_En12
  SIGNAL Data_Type_Conversion7_out1       : signed(31 DOWNTO 0);  -- sfix32_En12

BEGIN
  u_4_level_dwt_tc : alpha4_level_dwt_tc
    PORT MAP( clk => clk,
              reset => reset,
              clk_enable => clk_enable,
              enb => enb,
              enb_1_2_0 => enb_1_2_0,
              enb_1_2_1 => enb_1_2_1,
              enb_1_4_0 => enb_1_4_0,
              enb_1_4_1 => enb_1_4_1,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              enb_1_64_0 => enb_1_64_0,
              enb_1_64_1 => enb_1_64_1
              );

  u_1_level_dwt : alpha1_level_dwt
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2_0 => enb_1_2_0,
              enb => enb,
              enb_1_2_1 => enb_1_2_1,
              s_in => signal_in,  -- sfix32_En12
              enable => enable,
              D => alpha1_level_dwt_out1,  -- sfix51_En12
              A => alpha1_level_dwt_out2  -- sfix51_En12
              );

  u_1_level_dwt1 : alpha1_level_dwt1
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              enb_1_2_0 => enb_1_2_0,
              enb_1_4_1 => enb_1_4_1,
              s_in => alpha1_level_dwt_out2,  -- sfix51_En12
              enable => enable,
              D => alpha1_level_dwt1_out1,  -- sfix70_En12
              A => alpha1_level_dwt1_out2  -- sfix70_En12
              );

  u_1_level_dwt2 : alpha1_level_dwt2
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_4_0 => enb_1_4_0,
              enb_1_8_0 => enb_1_8_0,
              enb_1_8_1 => enb_1_8_1,
              s_in => alpha1_level_dwt1_out2,  -- sfix70_En12
              enable => enable,
              D => alpha1_level_dwt2_out1,  -- sfix89_En12
              A => alpha1_level_dwt2_out2  -- sfix89_En12
              );

  u_1_level_dwt3 : alpha1_level_dwt3
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_8_0 => enb_1_8_0,
              enb_1_16_0 => enb_1_16_0,
              enb_1_16_1 => enb_1_16_1,
              s_in => alpha1_level_dwt2_out2,  -- sfix89_En12
              enable => enable,
              D => alpha1_level_dwt3_out1,  -- sfix108_En12
              A => alpha1_level_dwt3_out2  -- sfix108_En12
              );

  u_1_level_dwt4 : alpha1_level_dwt4
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_16_0 => enb_1_16_0,
              enb_1_32_0 => enb_1_32_0,
              enb_1_32_1 => enb_1_32_1,
              s_in => alpha1_level_dwt3_out2,  -- sfix108_En12
              enable => enable,
              D => alpha1_level_dwt4_out1,  -- sfix127_En12
              A => alpha1_level_dwt4_out2  -- sfix127_En12
              );

  u_1_level_dwt5 : alpha1_level_dwt5
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_32_0 => enb_1_32_0,
              enb_1_64_0 => enb_1_64_0,
              enb_1_64_1 => enb_1_64_1,
              s_in => std_logic_vector(Data_Type_Conversion6_out1),  -- sfix32_En12
              enable => enable,
              D => alpha1_level_dwt5_out1,  -- sfix51_En12
              A => alpha1_level_dwt5_out2  -- sfix51_En12
              );

  alpha1_level_dwt4_out2_signed <= signed(alpha1_level_dwt4_out2);

  Data_Type_Conversion6_out1 <= alpha1_level_dwt4_out2_signed(31 DOWNTO 0);

  alpha1_level_dwt5_out2_signed <= signed(alpha1_level_dwt5_out2);

  Data_Type_Conversion2_out1 <= alpha1_level_dwt5_out2_signed(31 DOWNTO 0);

  A6 <= std_logic_vector(Data_Type_Conversion2_out1);

  alpha1_level_dwt5_out1_signed <= signed(alpha1_level_dwt5_out1);

  Delay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay5_reg <= (OTHERS => to_signed(0, 51));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_64_0 = '1' THEN
        Delay5_reg(0) <= alpha1_level_dwt5_out1_signed;
        Delay5_reg(1) <= Delay5_reg(0);
      END IF;
    END IF;
  END PROCESS Delay5_process;

  Delay5_out1 <= Delay5_reg(1);

  Data_Type_Conversion4_out1 <= Delay5_out1(31 DOWNTO 0);

  D6 <= std_logic_vector(Data_Type_Conversion4_out1);

  alpha1_level_dwt4_out1_signed <= signed(alpha1_level_dwt4_out1);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_reg <= (OTHERS => to_signed(0, 127));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_32_0 = '1' THEN
        Delay4_reg(0) <= alpha1_level_dwt4_out1_signed;
        Delay4_reg(1 TO 8) <= Delay4_reg(0 TO 7);
      END IF;
    END IF;
  END PROCESS Delay4_process;

  Delay4_out1 <= Delay4_reg(8);

  Data_Type_Conversion5_out1 <= Delay4_out1(31 DOWNTO 0);

  D5 <= std_logic_vector(Data_Type_Conversion5_out1);

  alpha1_level_dwt3_out1_signed <= signed(alpha1_level_dwt3_out1);

  Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_reg <= (OTHERS => to_signed(0, 108));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_16_0 = '1' THEN
        Delay3_reg(0) <= alpha1_level_dwt3_out1_signed;
        Delay3_reg(1 TO 22) <= Delay3_reg(0 TO 21);
      END IF;
    END IF;
  END PROCESS Delay3_process;

  Delay3_out1 <= Delay3_reg(22);

  Data_Type_Conversion3_out1 <= Delay3_out1(31 DOWNTO 0);

  D4 <= std_logic_vector(Data_Type_Conversion3_out1);

  alpha1_level_dwt2_out1_signed <= signed(alpha1_level_dwt2_out1);

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_reg <= (OTHERS => to_signed(0, 89));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_8_0 = '1' THEN
        Delay2_reg(0) <= alpha1_level_dwt2_out1_signed;
        Delay2_reg(1 TO 50) <= Delay2_reg(0 TO 49);
      END IF;
    END IF;
  END PROCESS Delay2_process;

  Delay2_out1 <= Delay2_reg(50);

  Data_Type_Conversion_out1 <= Delay2_out1(31 DOWNTO 0);

  D3 <= std_logic_vector(Data_Type_Conversion_out1);

  alpha1_level_dwt1_out1_signed <= signed(alpha1_level_dwt1_out1);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_reg <= (OTHERS => to_signed(0, 70));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_4_0 = '1' THEN
        Delay1_reg(0) <= alpha1_level_dwt1_out1_signed;
        Delay1_reg(1 TO 107) <= Delay1_reg(0 TO 106);
      END IF;
    END IF;
  END PROCESS Delay1_process;

  Delay1_out1 <= Delay1_reg(107);

  Data_Type_Conversion1_out1 <= Delay1_out1(31 DOWNTO 0);

  D2 <= std_logic_vector(Data_Type_Conversion1_out1);

  alpha1_level_dwt_out1_signed <= signed(alpha1_level_dwt_out1);

  Delay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay6_reg <= (OTHERS => to_signed(0, 51));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2_0 = '1' THEN
        Delay6_reg(0) <= alpha1_level_dwt_out1_signed;
        Delay6_reg(1 TO 221) <= Delay6_reg(0 TO 220);
      END IF;
    END IF;
  END PROCESS Delay6_process;

  Delay6_out1 <= Delay6_reg(221);

  Data_Type_Conversion7_out1 <= Delay6_out1(31 DOWNTO 0);

  D1 <= std_logic_vector(Data_Type_Conversion7_out1);

  ce_out_0 <= enb_1_64_1;

  ce_out_1 <= enb_1_32_1;

  ce_out_2 <= enb_1_16_1;

  ce_out_3 <= enb_1_8_1;

  ce_out_4 <= enb_1_4_1;

  ce_out_5 <= enb_1_2_1;

END rtl;

